#ifndef COSMODROME_APP_H
#define COSMODROME_APP_H

#include <iostream>
#include <map>
#include <stack>
#include <string>
#include <Storage.h>
#include <State.h>
#include <CMenu.h>
#include <ItemMenu.h>
#include <InterfaceScreen.h>
#include <Auth/Auth.h>
#include <Main/Main.h>
#include <AccountList/AccountList.h>
#include <PhotoList/PhotoList.h>
#include <AlbumList/AlbumList.h>
#include <config.h>

// для винды добавляем всякую муть
#if defined(_WIN32) || defined(_WIN64)

#include <windows.h>

#endif

using std::stack;
using std::map;
using std::string;
using std::cout;

/*
 * Главный класс нашего приложения
 * здесь будет описана основная логика его работы
 *
 * Класс - является синглтоном
 */
class App {
public:
    // удаляем конструктор копирования
    // чтобы мы не смогли сделать копию
    // нашего объекта
    App(const App &) = delete;

    // удаляем оператор присваивания
    // также, чтобы мы не смогли снять копию
    // объекта
    App &operator=(const App &) = delete;

    // метод получения объекта приложения
    // метод при первом вызове создаёт
    // статический объект класса App
    // и возвращает ссылку на него
    // при повторном вызове, просто возвращает
    // ссылку на  уже сущ. объект
    static App &createApp();

    // главный метод запуска программы
    // точка входа в основную логику программы
    // с этого метода нначинается обработка
    // событий нашей программы
    int start();

    // деструктор объекта
    ~App();

private:
    // закрываем конструктор
    // делаем конструктор приватным
    // чтобы мы не могли из вне создавать
    // объекты данного класса
    App();

    // ссылка на объект нашего хранилища
    // сюда мы кладём ссылку на глобальное
    // хранилище наших состояний
    // объект этого хранилища, также является сингтоном
    // по этому мы просто получаем его
    // чтобы было удобно работать
    Storage &m_storage;

    // указатель на текущий экран
    // здесь будет храниться указатель
    // на экран, который сейчас выполняется
    // или будет выполнен
    // указатель будет браться из словаря экранов
    // который объявлен в State
    InterfaceScreen *m_current_screen{};

    // стэк указателей на рабочие экраны
    // здесь будет храниться стек экранов
    // сюда будут помещаться указатели на экраны
    // на которые нужно вернуться после закрытия
    // какого - то экрана
    // например окно регистрации поверх окна
    // списка пользователей
    // экран список пользователей отправляется сюда
    // чтобы потом восстановиться
    StackScreens m_stack_screens{};

    // тригер отвечающий за показатель работы программы
    // логическая переменная, которая показывает
    // следует ли нам продолжать обработку событий
    // программы, или стоит её завершить
    bool m_is_run{};

    // метод начальной настройки app
    // этот метод вызывается при первой настройки
    // объекта в конструкторе
    // сюда можно поместить основную логику
    // которая должна инициализировать начальное
    // состояние нашего приложения
    void _init();

    // метод добавления текущего экрана в стек
    // возвращает true - если всё получилось
    bool _pushStackCurrentScreen();

    // метод возврата экрана из стэка
    // возвращает false - если в стэке больше нет экранов
    bool _pullStackCurrentScreen();

    // метод запуска транзакции экрана
    // он отвечает за обработку действий после закрытия какого - либо экрана
    // именно этот метод обрабатывает
    // дальнейшие действия, после выхода из текущего экрана
    void _startTransactionScreen();
};


#endif //COSMODROME_APP_H
