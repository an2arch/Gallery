#include "Auth.h"

// функция валидации ввода пользователя
// заметим, что эта функция не будет доступна из других
// участков программы
bool validateEnter(const string &str) {
    return !str.empty();
}

// выполняем начальную инициализацию экрана
void Auth::_init() {
    // TODO: инициализируем начальное состояние экрана
}

Auth::Auth() {
    // выполняем начальную настройку экрана
    _init();
}

// возвращаем указатель на созданный объект
// текущего класса экрана
Auth *Auth::createScreen() {
    static Auth *auth = new Auth();

    return auth;
}

// метод, главная точка входа в экран
int Auth::start() {
    // TODO: пишем логику экрана здесь

    // получаем указатель на объект хранилища
    m_storage = Storage::getStorage();

    // выполняем отрисовку шапки
    renderMain();

    Account *account{};

    // запускаем цикл авторизации
    // если пользователь ввёл неверные данные
    // запрашиваем их у него ещё раз
    for (account = auth(); !account; account = auth()) {
        cout << "\n\nПользователя с таким логином и паролем не существует! Попробуйте ещё раз!\n\n" << endl;
    }

    // если авторизация прошла, то в user лежит указатель на успешно вошедшего пользователя
    // делаем его текущим
    // вызываем у хранилища метод диспач
    // и передаём ему объект события
    // первым параметром идёт тип события
    // вторым - указатель на пользователя
    // который мы конвертировали в неопределённый указатель
    m_storage->dispatch(Action{
            ActionTypes::SET_CURRENT_USER,
            static_cast<void *>(account)
    });

    // теперь устанавливаем экран, который будет открыт следующим
    m_storage->dispatch(Action{
            ActionTypes::SET_INTENT_NEXT_SCREEN,
            static_cast<MapScreens *>(m_storage->getState().screens_map)->at(IdScreens::MAIN)
    });

    return 0;
}

void Auth::renderMain() const {
    // стираем всё с экрана
    system("cls");

    cout << "Добро пожаловать" << endl;
    cout << "===============================================\n\n";
    cout << "Чтобы продолжить Вам необходимо авторизироваться\n"
            "по вашим личным данным - login/password,\n"
            "если Вы не знаете, или не помните свои авторизационные\n"
            "данные свяжитесь с администратором!\n";
    cout << "-----------------------------------------------\n" << endl;
}

// здесь мы выполняем авторизациюю пользователя
// и возвращаем указатель на авторизировавшигося пользователя
Account *Auth::auth() {
    // запрашиваем у пользователя логин
    string login = getEnteredString("Введите логин -> ", validateEnter);

    // запрашиваем у пользователя пароль
    // точно также, пароль не должен быть пустым
    string password = getEnteredString("Введите пароль -> ", validateEnter);

    // ищем пользователя по полученному логину
    for (const auto &user : m_storage->getState().accounts) {
        if (user->login == login) {
            // если нашли совпадение, проверяем пароль
            if (user->password == password) {
                // всё хорошо? - отправляем указатель на пользователя
                return user.get();
            }
        }
    }

    return nullptr;
}
